  
if(!args.directory) {
  html`<div class="error">No directory argument given (use /pagelets/represent-directory?directory=...)</div>`
  return true
}
// else

let serverDir = ctx.addPathDot(ctx.path.relative('./', ctx.addPathDot(args.directory)))
let clientDir = ctx.sanitizeHTMLString(serverDir.slice(1)) // trim off the dot .

if(!ctx.fs.existsSync(serverDir)) {
  html`<div class="error">Given directory ${clientDir} doesn't exist</div>`
  return true
}
// else

let dirStat = ctx.fs.statSync(serverDir)
if(!dirStat.isDirectory()) {
  html`<div class="error">Given directory ${clientDir} isn't a directory</div>`
  return true
}
// else

let thisUrl = `/pagelets/represent-directory.jhp?directory=${clientDir}`
let upUrl = `/pagelets/represent-directory.jhp?directory=${ctx.path.dirname(clientDir)}`

let dirFileCount = 0
for(const _ of ctx.fs.readdirSync(serverDir))
  dirFileCount++

const maxFilesToShow = 16

  
// is user actually who they say they are?
let userLib = await ctx.runScript('./bin/user.s.js')
let username = args.cookies?.loggedin ? args.cookies.username : undefined
if(!userLib.handleUserAuthcheck(response, args))
  username = undefined
// else

// is user allowed to do this here?
const parentDirectory = ctx.path.dirname(serverDir)
const basename = ctx.path.basename(serverDir)
const groupLib = await ctx.runScript('./bin/group.s.js')
const ip = request.connection.remoteAddress
const isAllowed = groupLib.userControlInclusionStatus(username, ip, serverDir, ['accessFile', `access`, `accessFile(${basename})`, `access(${basename})`])
if(!isAllowed) {
  html`<div class="error">${username ? 'User ' + username : 'Anonymous users '} cannot access the file ${serverDir}</div>`
  return true
}
// else

const commonOperationOptionsHtml = (file, selector)=> /*html*/`
  <details>
    <summary class="linklike" no-removal-on-click>File operations</summary>
    <div class="indented">
      <button class="linklike" srcfn="/lib/elem-functions.mjs: copyToClipboard" data-payload="${file}">Copy path</button><br>
      <button class="linklike" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" mixin-target="${selector ?? 'after this parent .file'}" pagelet-src="/pagelets/dialog/file-to-operation.html?file=${file}&operation=copy">Copy to</button><br>
      <button class="linklike" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" mixin-target="${selector ?? 'after this parent .file'}" pagelet-src="/pagelets/dialog/file-to-operation.html?file=${file}&operation=move">Move to</button><br>
      <button class="linklike" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" mixin-target="${selector ?? 'after this parent .file'}" pagelet-src="/pagelets/dialog/rename-file.html?file=${file}">Rename</button><br>
      <button class="linklike" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" mixin-target="${selector ?? 'after this parent .file'}" pagelet-src="/pagelets/dialog/trash-file.html?file=${file}">Trash</button><br>
      <button class="linklike" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" mixin-target="${selector ?? 'after this parent .file'}" pagelet-src="/pagelets/components/file-permissions.jhp?file=${file}">Permissions</button>
    </div>
  </details>
`

response.statusCode = 200

html`
<div class="pagelet directory-representation" data-url="/pagelets/represent-directory.jhp?directory=${args.directory}" data-file=${clientDir} data-dir=${clientDir}>
  `; await ctx.serveJHP('./pagelets/pagelet-header.jhp', request, response, args); html`
  <link href="/pagelets/represent-directory.css" rel="stylesheet">
  <title>Directory ${ctx.path.basename(clientDir)} - ${clientDir}</title>
  <div class="header">
    Files inside directory <code>${clientDir}</code>
    <button class="s-menu linklike" srcfn="/lib/elem-functions.mjs: makeDropdown">S
      <template><div class="dropdown" remove-on-click>
        <a href="${upUrl}" title="go to parent directory" target="replace-noframe this parent .pagelet" title="Open parent directory">Up</a><br>
        Directory: ${clientDir} <button srcfn="/lib/elem-functions.mjs: copyToClipboard" data-payload="${clientDir}">Copy</button><br>
        <a href="${thisUrl}" title="reload" target="replace-noframe this parent .pagelet">Reload directory</a>
        <button srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" pagelet-src="/pagelets/represent-message-list.jhp?directory=${clientDir}" target="replace-noframe this parent .pagelet">As message list</button><br>
        ${commonOperationOptionsHtml(clientDir, 'after this parent button.s-menu')}
        <button srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet >> child .open-file" pagelet-src="/pagelets/components/search-directory.html?directory=${clientDir}">Search</button>
      </div></template>
    </button>
  </div>
  <call-resource srcfn="/pagelets/represent-directory.mjs: addOpenButtonFunctionality"></call-resource>
  <span class="open-file">
    <input type="text" placeholder="file path" data-subtitute="DIR:${clientDir}"/>
    <button class="open linklike horizontal-margins">Open</button>
    <button class="as-file linklike horizontal-margins">As file</button>
  </span>
  
  <div class="file-list">`
    
    let currentFileCount = 0
    for(const fileBasename of ctx.fs.readdirSync(serverDir)) {
      if(currentFileCount++ > maxFilesToShow) { // only show up to max number of files
        html`
          <div>Showing ${currentFileCount} of ${dirFileCount}</div>
          <div>Search:</div>
          <html-mixin src="/pagelets/components/search-directory.html?directory=${clientDir}"></html-mixin>
        `
        break
      }
      // else
      let file = ctx.path.join(serverDir, fileBasename)
      if(fileBasename[0] === '.') // no dot files listed
        continue
      // else
      let fileStat = ctx.fs.statSync(file)
      if(fileStat.isDirectory()) {
        html`
        <div class="file">
          <span class="dir symbol" data-file=${file}></span>
          <a href="/pagelets/represent-directory.jhp?directory=${file}" title="Directory ${file}" target="after this">${fileBasename}</a>
          <button class="s-menu linklike" srcfn="/lib/elem-functions.mjs: makeDropdown">S
            <template><div class="dropdown" remove-on-click>
              ${commonOperationOptionsHtml(file)}
            </div></template>
          </button>
        </div>
        `
      } else {
        html`
        <div class="file" data-file=${file}>
          <span class="file symbol"></span>
          <a href="/pagelets/represent-file.jhp?file=${file}" title="File: ${file}" target="after this" alttarget="replace-noframe this parent .pagelet">${fileBasename}</a>
          <button class="s-menu linklike" srcfn="/lib/elem-functions.mjs: makeDropdown">S
            <template><div class="dropdown" remove-on-click>
              `
              if(file.endsWith('.txt'))
                html`<button class="linklike" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" pagelet-src="/pagelets/represent-list.jhp?file=${file}" target="after this parent button.s-menu">As list</button><br>`
              html`
              ${commonOperationOptionsHtml(file)}
              <button class="linklike" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" pagelet-src="/pagelets/dialog/edit-file.html?file=${file}" target="after this parent button.s-menu">Edit</button><br>
              <button class="linklike" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" pagelet-src="/pagelets/dialog/append-to-file.jhp?file=${file}" target="after this parent button.s-menu">Append</button>
            </div></template>
          </button>
        </div>`
      }
    }
    
    html`
  </div>
</div>
`