
if(args.file === undefined) { // no file argument given
  if(args.directory !== undefined)
    return ctx.serveJHP('./pagelets/represent-directory.jhp', request, response, args)
  // else
  html`<div class="pagelet file-representation" data-url="/pagelets/represent-file.jhp?file=undefined">`
    await ctx.serveJHP('./pagelets/pagelet-header.jhp', request, response)
    html`<title>Bad file representation</title>`
    html`<div>No <code>file</code> argument given (use <code>/pagelets/represent-file.jhp?file=<span style="red">...</span></code> to specify the file to represent)</div>`
  html`</div>`
  return true
}
// else

let serverFile = ctx.sanitizeHTMLString(ctx.addPathDot(args.file))
let clientFile = ctx.sanitizeHTMLString(serverFile.slice(1))

let exists = ctx.fs.existsSync(serverFile)

let ext = ctx.path.extname(clientFile)
if(ext === '.html' || ext === '.jhp') { // html files represent themselves
  let interpolateObj = {}
  for(const key in args)
    interpolateObj[`arg-${key}`] = args[key]
  if(exists)
    return ctx.serveFile(serverFile, response, interpolateObj)
  else
    return ctx.serveJHP('./lib/404.jhp', request, response, {requestPath: serverFile})
}
// else

let fileMTime
if(exists) {
  let fileStat = ctx.fs.statSync(serverFile)
  fileMTime = fileStat.mtimeMs
  if(fileStat.isDirectory()) {
    let newArgs = args
    newArgs.directory = args.file
    delete newArgs.file
    return ctx.serveJHP('./pagelets/represent-directory.jhp', request, response, newArgs)
  }
  // else

  let etag = request.headers['if-none-match'] ?? ''
  let thisStat = ctx.fs.statSync('./pagelets/represent-file.jhp')
  let thisEtag = `${thisStat.mtimeMs}${ctx.sha256(JSON.stringify(args))}${fileMTime}`
  response.setHeader('ETag', thisEtag)
  if(etag === thisEtag) {
    response.statusCode = 304
    return true
  }
  // else
}

const thisUrl = `/pagelets/represent-file.jhp?file=${args.file}${args.focus ? '&' + args.focus : ''}`

let extContent  = ctx.extContentMap[ctx.path.extname(serverFile)]
let [contentType, isBinary] = extContent ?? [undefined, undefined]
if(contentType === undefined)
  [contentType, isBinary] = ctx.extContentMap.default
  
principleContentType = ctx.splitAtFirst(contentType, ';')?.[0] ?? contentType

if(isBinary) {
  if(exists) {
    html`
    <div class="pagelet file-representation" data-file="${clientFile}" data-url="${thisUrl}" data-focus="${args.focus ?? ''}">
      `; await ctx.serveJHP('./pagelets/pagelet-header.jhp', request, response); html`
      <title>File ${ctx.path.basename(clientFile)} - ${clientFile}</title>
      
      <script src="/lib/callib/callib0.mjs" type="module"></script>
      <script src="/lib/mixin.mjs" type="module"></script>
      
      <link href="/pagelets/represent-file.css" rel="stylesheet">
      `
      if(principleContentType.startsWith('image/')) // is an image, use <img> element
        html`<img class="current-content" src="${clientFile}?random=${fileMTime}" style="padding: 4px" cache="no-cache" title="Current content"/>`
      else
        html`<div>File</div>`
      html`
      
      <select is="call-selection" class="operation linklike" style="appearance: none; width: 1em">
        <option style="color:gray">S</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="replace-noframe this parent .pagelet" pagelet-src="${thisUrl}">Reload</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent select" pagelet-src="/pagelets/dialog/edit-file.html?file=${clientFile}">Edit</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent select" pagelet-src="/pagelets/dialog/append-to-file.jhp?file=${clientFile}">Append</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/represent-directory.jhp?directory=${ctx.path.dirname(clientFile)}">Directory</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/file-to-operation.html?file=${clientFile}&operation=copy">Copy to</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/file-to-operation.html?file=${clientFile}&operation=move">Move to</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/rename-file.html?file=${clientFile}">Rename</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/trash-file.html?file=${clientFile}">Trash</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/components/file-permissions.jhp?file=${clientFile}">Permissions</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" pagelet-src="${thisUrl}" target="after this parent *:is(.controller-frame, body)">Enframe pagelet</option>
        <option srcfn="/lib/elem-functions.mjs: copyToClipboard" data-payload="${clientFile}">Copy url</option>
      </select>
    </div>
    `
    return true
  } else { // binary file, doesn't exist
    html`
    <div class="pagelet file-representation" data-file="${clientFile}" data-url="${thisUrl}" data-focus="${args.focus ?? ''}">
      `; await ctx.serveJHP('./pagelets/pagelet-header.jhp', request, response); html`
      <title>File ${ctx.path.basename(clientFile)} - ${clientFile}</title>
      <script src="/lib/callib/callib0.mjs" type="module"></script>
      <script src="/lib/mixin.mjs" type="module"></script>
      <link href="/pagelets/represent-file.css" rel="stylesheet">
      `
      if(principleContentType.startsWith('image/')) // is an image, use <img> element
        html`<span style="color: red">Image 404</span>`
      else
        html`<span style="color: red">File 404</span>`
        
      html`
      <select is="call-selection" class="operation linklike" style="appearance: none; width: 1em">
        <option style="color:gray">S</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="replace-noframe this parent .pagelet" pagelet-src="${thisUrl}">Reload</option>
        <option srcfn="/pagelets/represent-file.mjs: uploadIt">Upload</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/represent-directory.jhp?directory=${ctx.path.dirname(clientFile)}">Directory</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/file-to-operation.html?file=${clientFile}&operation=copy">Copy to</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/file-to-operation.html?file=${clientFile}&operation=move">Move to</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/rename-file.html?file=${clientFile}">Rename</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/trash-file.html?file=${clientFile}">Trash</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/components/file-permissions.jhp?file=${clientFile}">Permissions</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" pagelet-src="${thisUrl}" target="after this parent *:is(.controller-frame, body)">Enframe pagelet</option>
        <option srcfn="/lib/elem-functions.mjs: copyToClipboard" data-payload="${clientFile}">Copy url</option>
      </select>
    </div>
    `
    return true
  }
} else { // textual file
  if(exists) {
    html`
    <div class="pagelet file-representation" data-file="${clientFile}" data-url="${thisUrl}" data-focus="${args.focus ?? ''}">
      `; await ctx.serveJHP('./pagelets/pagelet-header.jhp', request, response); html`
      <title>File ${ctx.path.basename(clientFile)} - ${clientFile}</title>
      
      <script src="/lib/callib/callib0.mjs" type="module"></script>
      <script src="/lib/mixin.mjs" type="module"></script>
      <link href="/pagelets/represent-file.css" rel="stylesheet">
      
      <call-resource srcfn="/pagelets/represent-file.mjs: initializeContentDisplay"></call-resource>
      <span class="content-display"></span>
      
      <button class="s-menu linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: makeDropdown">S
        <template><div class="dropdown" remove-on-click>
          <button class="linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="replace-noframe this parent .dropdown-root >> jump data-origin >> parent .pagelet" pagelet-src="${thisUrl}">Reload</button><br>
          <button class="linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .dropdown-root >> jump data-origin >> parent button.s-menu" pagelet-src="/pagelets/dialog/edit-file.html?file=${clientFile}">Edit</button><br>
          <button class="linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .dropdown-root >> jump data-origin >> parent button.s-menu" pagelet-src="/pagelets/dialog/append-to-file.jhp?file=${clientFile}">Append</button><br>
          <button class="linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .dropdown-root >> jump data-origin >> parent .pagelet" pagelet-src="/pagelets/represent-directory.jhp?directory=${ctx.path.dirname(clientFile)}">Directory</button><br>
          <button class="linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .dropdown-root >> jump data-origin >> parent .pagelet" pagelet-src="/pagelets/dialog/file-to-operation.html?file=${clientFile}&operation=copy">Copy to</button><br>
          <button class="linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .dropdown-root >> jump data-origin >> parent .pagelet" pagelet-src="/pagelets/dialog/file-to-operation.html?file=${clientFile}&operation=move">Move to</button><br>
          <button class="linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .dropdown-root >> jump data-origin >> parent .pagelet" pagelet-src="/pagelets/dialog/rename-file.html?file=${clientFile}">Rename</button><br>
          <button class="linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .dropdown-root >> jump data-origin >> parent .pagelet" pagelet-src="/pagelets/dialog/trash-file.html?file=${clientFile}">Trash</button><br>
          <button class="linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .dropdown-root >> jump data-origin >> parent .pagelet" pagelet-src="/pagelets/components/file-permissions.jhp?file=${clientFile}">Permissions</button><br>
          <button class="linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" pagelet-src="${thisUrl}" target="after this parent *:is(.controller-frame, body)">Enframe pagelet</button><br>
          <button class="linklike" is="call-resource-button" srcfn="/lib/elem-functions.mjs: copyToClipboard" data-payload="${clientFile}">Copy url</button><br>
        </div></template>
      </button>
    </div>
    `
    return true
  } else { // textual file, doesn't exist
    html`
    <div class="pagelet file-representation" data-file="${clientFile}" data-url="${thisUrl}" data-focus="${args.focus ?? ''}">
      `; await ctx.serveJHP('./pagelets/pagelet-header.jhp', request, response); html`
      <title>Non existent file ${ctx.path.basename(clientFile)} - ${clientFile}</title>
      <script src="/lib/callib/callib0.mjs" type="module"></script>
      <script src="/lib/mixin.mjs" type="module"></script>
      <link href="/pagelets/represent-file.css" rel="stylesheet">
      
      <span style="color:red" title="${clientFile} doesn't exist">404</span>
      
      <select is="call-selection" class="operation linklike" style="appearance: none; width: 1em">
        <option style="color:gray">S</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="replace-noframe this parent .pagelet" pagelet-src="${thisUrl}">Reload</option>
        <option srcfn="/pagelets/represent-file.mjs: uploadIt">Upload</option>
        <option srcfn="/pagelets/represent-file.mjs: makeIt">Make it</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/represent-directory.jhp?directory=${ctx.path.dirname(clientFile)}">Directory</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/file-to-operation.html?file=${clientFile}&operation=copy">Copy to</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/file-to-operation.html?file=${clientFile}&operation=move">Move to</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/rename-file.html?file=${clientFile}">Rename</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/dialog/trash-file.html?file=${clientFile}">Trash</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" target="after this parent .pagelet" pagelet-src="/pagelets/components/file-permissions.jhp?file=${clientFile}">Permissions</option>
        <option srcfn="/lib/elem-functions.mjs: mixinRemotePagelet" pagelet-src="${thisUrl}" target="after this parent *:is(.controller-frame, body)">Enframe pagelet</option>
        <option srcfn="/lib/elem-functions.mjs: copyToClipboard" data-payload="${clientFile}">Copy url</option>
      </select>
    </div>
    `
    return true
  }
}

